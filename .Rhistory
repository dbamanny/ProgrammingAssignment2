mean(1:1337)
mean(2:1337)
q()
a <- (1, 2, 3, 4, 5)
a(1, 2, 3, 4, 5)
a <- a(1,2,3,4,5)
a <- 1,2,3,4,5
a <- (1,2,3,4,5)
a <- c(1,2,3,4,5)
b <- d(6,7,8,9,10)
a <- b(1,2,3,4,5)
a <- c(1,2,3,4,5)
b <- c(6,7,8,9,10)
a+b
a
b
ab <- c(a,b)
ab
d <- c(1:10, 30:40, 5, 7, 9, 12)
median(d)
sum(d)
q()
x <- 3
x <- NULL
x
x <- c(x,3) #concatenate the item 3 to x
x
x <- c(x,5)
x
a <- c(1,2,3,4,5.5) # numeric vector
b <- c("john","david","kumar","jane","mariam") # character vector
c <- c(TRUE,TRUE,FALSE, T, F) #logical vector
c
c[3]
c[c==T]
a[a>1 & a<4]
which(a>1 & a<4)
#Some ways of creating a sequence
seq(2, 100, 4)
2:6
paste("A", 1:6, sep= "")
rep(b, 5)
rep(letters[1:5], 3)
sample(LETTERS, 5, replace=TRUE)  #the function sample can sample with or without replacement
sample(LETTERS, 5, replace=T)
sample(LETTERS, 5, replace=T) #notice how sample generates a new sequence each time
set.seed(200)  # sometimes it is useful to create random, but reproducible numbers
sample(LETTERS, 5, replace=T)
set.seed(200)
sample(LETTERS, 5, replace=T)
dice  <- sample(1:6, 50, replace=T)
#explore objects
typeof(dice)
str(dice)
is.vector(dice)
head(dice)
tail(dice)
length(dice)
max(dice)
min(dice)
summary(dice)
#let's introduce an error in dice
dice[5] <- 55
plot(dice)  #excellent for exploring objects
which(dice > 6)
# R has a matrix object
M <- dice
is.vector (M)
dim(M) <- c(10,5)  # rows, columns
?dim()
is.vector(M)
str(M)
M
fix(M)
TM <- t(M)
TM\
TM
"some text" -> M[2,1]
M   # everything in a matrix has to be the same type
#a list object can hold a collection of different objects
MyList <- list(M, a, dice)
MyList
MyList [[1]] [2,]
# data.frame
#one row one observation, one column one variable
MyDataFrame <- data.frame(a, b, c)
MyDataFrame
str(MyDataFrame)
MyDataFrame$a
MyDataFrame[1,]
MyDataFrame[,1]
#calculating circle area radius 5
5^2 * pi
radius <- 5
radius^2 *pi
CircleArea <- function(radius) {
radius*radius*pi
}
CircleArea(5)
a
CircleArea(a)
plot(a, CircleArea(a))
#explore the function by typing
CircleArea
save.image("D:\\My Classes\\Explore Statistics with R\\StatRx_W1_F4+-+Start+using+R.mp4")
q()
#We recommend that you use file/ open script and select this file
#Select code in the script window and press ' ctrl r ' to run the code
#You can also copy text from this file and paste it in R Console
#Or use the command source("W1F5_Objects.r") to run the whole content at once
x <- 3
x
x <- c(x,3) #concatenate the item 3 to x
x
x         #running the code x will return the content of x
x <- c(x,5)
x
a <- c(1,2,3,4,5.5) # numeric vector
b <- c("john","david","kumar","jane","mariam") # character vector
c <- c(TRUE,TRUE,FALSE, T, F) #logical vector
c
c[3]
c[c==T]
a[a>1 & a<4]
which(a>1 & a<4)
#Some ways of creating a sequence
seq(2, 100, 4)
2:6
10:30
101:110
paste("A", 1:6, sep= "")
rep(b, 5)
rep(letters[1:5], 3)
sample(LETTERS, 5, replace=TRUE)  #the function sample can sample with or without replacement
sample(LETTERS, 5, replace=T)
sample(LETTERS, 5, replace=T) #notice how sample generates a new sequence each time
set.seed(200)  # sometimes it is useful to create random, but reproducible numbers
sample(LETTERS, 5, replace=T
)
dice  <- sample(1:6, 50, replace=T)
dice
#explore objects
typeof(dice)
dice[0]
str(dice)
is.vector(dice)
head(dice)
tail(dice)
length(dice)
max(dice)
min(dice)
summary(dice)
dice[5] <- 55
plot(x)
which(x>6)
# R has a matrix object
M <- dice
is.vector(M)
dim(M)<- c(10,5)  # rows, columns
?dim()
is.vector(M)
str(M)
M
fix(M) #the command fix() works in windows
M
#you can perform matrix operations
TM <- t(M)
TM
"some text" -> M[1,1]
M
# everything has to be the same type, the common possible type for integers and string would be string
#a list can hold a collection of different objects
MyList <- list(M, a, dice)
MyList
MyList[[1]][2,]
# data.frame
#one row one observation, one column one variable
MyDataFrame <- data.frame(a, b, c)
MyDataFrame
str(MyDataFrame)
MyDataFrame$a
MyDataFrame[1,]
#calculating circle area radius 5
5^2 * pi
radius <- 5
radius^2 *pi
CircleArea <- function(radius) {
radius*radius*pi
}
CircleArea(5)
a
CircleArea(a)
plot(a, CircleArea(a))
#explore the function by typing
CircleArea
q()
q()
1+1
install.packages("D:/My Classes/edX Foundations of Data Analysis/SDSFoundations_1.1.zip", repos = NULL)
sqrt(x^2)
2*25
500000*15
4*20
80*12
6^2+2
x^2
x <- 6^2+2
x^2
#Assign the value 6+2 to x
x <- 6+2
#Assign the value 6+2 to x
x <- 6+2
show x
#Assign the value 6+2 to x
x <- 6+2
x
sqrt(x^2)
z <- c(2,4,6,8,10)
z[3]
z != 10
z[z>5]
BikeData <- read.csv("D:/My Classes/edX Foundations of Data Analysis/Week-1/BikeData.csv")
View(BikeData)
View(BikeData)
library(SDSFoundations)
load("~/.RData")
#show number of students
table(BikeData$student)
#Pull out student data into a new data frame
student <-BikeData[BikeData$student==1,]
View(student)
#Find how often the students ride
table(student$cyc_freq)
#Create vector for the variable distance
distance <-student$distance
distance
#Find average distance ridden
mean(distance)
## This might take some time...
con <- url("http://www.jhsph.edu", "r")
x <- readLines(con)
> head(x)
[1] "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">"
[2] ""
[3] "<html>"
[4] "<head>"
[5] "\t<meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8
## This might take some time...
con <- url("http://www.jhsph.edu", "r")
x <- readLines(con)
> head(x)
## This might take some time...
con <- url("http://www.jhsph.edu", "r")
x <- readLines(con)
head(x)
## This might take some time...
con <- url("http://www.jhsph.edu", "r")
x <- readLines(con)
head(x)
find packages("devtools")
find.packages("devtools")
find.package("devtools")
clear
clear screen
install.packages("devtools")
library(devtools)
find_rtools()
find.package("devtools")
find.package("devtools")
install.packages("devtools")
find.package("devtools")
find.package("Rtools")
find.package("devtools")
q()
library(devtools)
find_rtools()
q()
library(devtools)
find_rtools()
library("swirl")
ls
rm(list=ls())
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- (z / my_sqrt)
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_
my_div
0
exit
quit
q()
setwd("D:/My Classes/Coursera_Data-Science-Program/2_R Programming/Projects")
library()
a <- c(1,2,3,4,5)
b <- c(6,7,8,9,10)
a + b
d <- c(1:10, 30:40, 5, 7, 9, 12)
median(d)
sum(d)
mean(d)
pie(d)
barplot(d)
boxplot(d)
class(d)
hist(d)
barplot(d)
hist(d)
c <- seq(31,50,1)
c
c <- seq(31,50,2)
c
c <- seq(31,101,2)
length(c)
c
c <- seq(31,61,2)
length(c)
c <- seq(31,71,2)
length(c)
c <- seq(31,69,2)
c
length(c)
barplot(c)
c <- seq(31,50,1)
barplot(c)
hist(c)
boxplot(c)
rnorm(20:200)
z <- c(2,4,6,8,10)
z[3]
z != 10
z[z?5]
z[z>5]
setwd("C:/Users/Manny/ProgrammingAssignment2")
getwd()
######################################################################
## The following two functions are written in a way that save in
## cache the computation for getting an inverse of a matrix. It is
## wise to save in cache all costly computations, so that when they
## are needed again, the value from cache is read instead of having
## to re-compute it.
##--------------------------------------------------------------------
##
## This first function, "makeCacheMatrix" creates a special matrix
## object that can cache its inverse. This special matrix is really
## just a list containing a function to:
## 1. Set the value of the matrix
## 2. Get the value of the matrix
## 3. Set the value of the inverse
## 4. Get the value of the inverse
makeCacheMatrix <- function(x = matrix()) {
im  = NULL
set = function(y) {
x <<- y        #<--- assigns value from environment different from the current environment
im <<- NULL     # Initialize on parent's framework (as line aboveb but with NULL)
}
get    = function() x
setinv = function(inverse) im <<- inverse
getinv = function() im
list(set=set,
get=get,
setinv=setinv,
getinv=getinv
)
}
######################################################################
## This function computes the inverse of the special matrix returned
## by function makeCacheMatrix above. If the inverse has already been
## calculated (and the matrix has not changed), then this function
## will retrive the inverse from cache.
## Assumption: The matrix supplied is always invertible
cacheSolve <- function(x, ...) {
im = x$getinv()
# if the inverse has already been computed
if (!is.null(im)){
# get value from the cache and skip the computation
message("getting cached data")
return(im)                     #<--- exit the function
}
# Inverse must be computed since no values for this matrix were found in cache
mat.data = x$get()
im = solve(mat.data, ...)
# set value of the inverse in cache
x$setinv(im)
im
}
getwd()
